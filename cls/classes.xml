<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2016.2.1 (Build 803U)" ts="2017-03-02 14:21:12">


<Class name="Demo.CoffeeMakerRESTServer">
<Super>%CSP.REST</Super>
<Description>
Use or operation of this code is subject to acceptance of the license available in the code repository for this code.
</Description>
<TimeChanged>64344,50482.727385</TimeChanged>
<TimeCreated>64320,60565.085217</TimeCreated>

<Parameter name="HandleCorsRequest">
<Default>1</Default>
</Parameter>

<XData name="UrlMap">
<XMLNamespace>http://www.intersystems.com/urlmap</XMLNamespace>
<Data><![CDATA[
<Routes>
<Route Url="/test" Method="GET" Call="test"/>
<Route Url="/coffeemakers" Method="GET" Call="GetAll" />
<Route Url="/coffeemaker/:id" Method="GET" Call="GetCoffeeMakerInfo" />
<Route Url="/newcoffeemaker" Method="POST" Call="NewMaker" />
<Route Url="/coffeemaker/:id" Method="PUT" Call="EditMaker" />
<Route Url="/coffeemaker/:id" Method="DELETE" Call="RemoveCoffeemaker"/>
</Routes>
]]></Data>
</XData>

<Method name="test">
<Description>
Tester method</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set cm = {
		"coffeemakerID": "20",
		"name": "My Coffee Maker",
		"brand": "Coffee Inc",
		"price": "23.45",
		"numcups": "1",
		"color": "green",
		"img": "img/coffee1.png"
	}
	Write cm.%ToJSON()
	quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// DATABASE METHODS

]]></Content>
</UDLText>

<Method name="GetAll">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tArr = []
	Set rs = ##class(%SQL.Statement).%ExecDirect(,"SELECT * FROM Demo.coffeemaker")
	While rs.%Next() {
		Do tArr.%Push({
			"img":    			(rs.%Get("Img")),
			"coffeemakerID":    (rs.%Get("CoffeemakerID")),
			"name": 			(rs.%Get("Name")),
			"brand":        	(rs.%Get("Brand")),
			"color":   			(rs.%Get("Color")),
			"numcups":          (rs.%Get("NumCups")),
			"price":        	(rs.%Get("Price"))
		})
	}
	
	Write tArr.%ToJSON()
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="NewMaker">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If '..GetJSONFromRequest(.obj) {
		Set %response.Status = ..#HTTP400BADREQUEST
		Set error = {"errormessage": "JSON not found"}
		Write error.%ToJSON()
		Quit $$$OK
	}
	
	If '..ValidateJSON(obj,.error) {
		Set %response.Status = ..#HTTP400BADREQUEST
		Write error.%ToJSON()
		Quit $$$OK
	}
	
	Set cm = ##class(Demo.coffeemaker).%New()
	Do ..CopyToCoffeemakerFromJSON(.cm,obj)
	
	Set sc = cm.%Save()
	
	Set result={}
	do result.%Set("Status",$s($$$ISERR(sc):$system.Status.GetOneErrorText(sc),1:"OK"))
	write result.%ToJSON()
	Quit sc
]]></Implementation>
</Method>

<Method name="EditMaker">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If '..GetJSONFromRequest(.obj) {
		Set %response.Status = ..#HTTP400BADREQUEST
		Set error = {"errormessage": "JSON not found"}
		Write error.%ToJSON()
		Quit $$$OK
	}
	
	If '..ValidateJSON(obj,.error) {
		Set %response.Status = ..#HTTP400BADREQUEST
		Write error.%ToJSON()
		Quit $$$OK
	}
	
	Set cm = ##class(Demo.coffeemaker).%OpenId(id)
	If '$IsObject(cm) {
		Set %response.Status = ..#HTTP404NOTFOUND
		Set error = {"errormessage": "Coffee maker does not exist"}
		Write error.%ToJSON()
		Quit $$$OK
	}
	
	Do ..CopyToCoffeemakerFromJSON(.cm,obj)
	
	Set sc = cm.%Save()
	
	Set result={}
	do result.%Set("Status",$s($$$ISERR(sc):$system.Status.GetOneErrorText(sc),1:"OK"))
	write result.%ToJSON()
	Quit sc
]]></Implementation>
</Method>

<Method name="RemoveCoffeemaker">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set result={}
	Set sc=0
	
	if id'="",##class(Demo.coffeemaker).%ExistsId(id) {
	  Set sc=##class(Demo.coffeemaker).%DeleteId(id)
	  do result.%Set("Status",$s($$$ISERR(sc):$system.Status.GetOneErrorText(sc),1:"OK"))
	}
	else  {
	  do result.%Set("Status","")	
	}
	
	write result.%ToJSON()
	
  	quit sc
]]></Implementation>
</Method>

<Method name="GetCoffeeMakerInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set coffeemaker = ##class(Demo.coffeemaker).%OpenId(id)
	If '$IsObject(coffeemaker) {
		Set %response.Status = ..#HTTP204NOCONTENT
	} Else {
		Set obj = {
			"img": (coffeemaker.Img),
			"coffeemakerID": (coffeemaker.CoffeemakerID),
			"name": 		(coffeemaker.Name),
			"brand":        (coffeemaker.Brand),
			"color":   		(coffeemaker.Color),
			"numcups":      (coffeemaker.NumCups),
			"price":        (coffeemaker.Price)
		}
		Write obj.%ToJSON()
	}
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// HELPER METHODS

]]></Content>
</UDLText>


<Method name="ValidateJSON">
<Description>
Helper method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>obj:%DynamicObject,*error:%DynamicObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set error = {}
	
	If obj.%Get("name") = "" {
		Set error.errormessage = "Name was blank"
		Quit 0
	}	
	
	If obj.%Get("brand") = "" {
		Set error.errormessage = "Brand was blank"
		Quit 0
	}
	
	Quit 1
]]></Implementation>
</Method>

<Method name="CopyToCoffeemakerFromJSON">
<Description>
Helper method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&cm:Demo.coffeemaker,obj:%DynamicObject]]></FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	Set cm.Name=obj.name
	set cm.Brand = obj.brand
	Set cm.Img = obj.img
	set cm.Color = obj.color
	set cm.NumCups = obj.numcups
	set cm.Price = obj.price
]]></Implementation>
</Method>

<Method name="GetJSONFromRequest">
<Description>
Helper method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*obj:%DynamicObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set ok = 1
	Try {
		Set obj = ##class(%DynamicObject).%FromJSON(%request.Content)
	} Catch ex {
		Set ok = 0
	}
	Quit ok
]]></Implementation>
</Method>
</Class>


<Class name="Demo.GenericCoffeeMakerRequest">
<Description>
Use or operation of this code is subject to acceptance of the license available in the code repository for this code.
</Description>
<TimeChanged>64344,47576.65262</TimeChanged>
<TimeCreated>64331,40617.788074</TimeCreated>

<Property name="Method">
<Type>%String</Type>
</Property>

<Property name="URL">
<Type>%String</Type>
</Property>

<Property name="Argument1">
<Type>%String</Type>
</Property>

<Property name="Payload">
<Type>Demo.tempCoffeemaker</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>GenericCoffeeMakerRequestDefaultData</DefaultData>
<Data name="GenericCoffeeMakerRequestDefaultData">
<Subscript>"GenericCoffeeMakerRequest"</Subscript>
<Value name="1">
<Value>Method</Value>
</Value>
<Value name="2">
<Value>URL</Value>
</Value>
<Value name="3">
<Value>String</Value>
</Value>
<Value name="4">
<Value>Argument1</Value>
</Value>
<Value name="5">
<Value>Payload</Value>
</Value>
</Data>
</Storage>

<Method name="%OnDelete">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Delete</METHOD> method to 
provide notification that the object specified by <VAR>oid</VAR> is being deleted.

<P>If this method returns an error then the object will not be deleted.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oid:%ObjectIdentity</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set tSC = $$$OK, tThis = ##class(Demo.GenericCoffeeMakerRequest).%Open(oid)
     If $ISOBJECT(tThis.Payload) {
	    Set tSC = ##class(Demo.tempCoffeemaker).%DeleteId(tThis.Payload.%Id())
    	Quit tSC
     }
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Demo.GenericCoffeeMakerResponse">
<Description>
Use or operation of this code is subject to acceptance of the license available in the code repository for this code.
</Description>
<TimeChanged>64341,34833.875217</TimeChanged>
<TimeCreated>64332,40783.000407</TimeCreated>

<Property name="JSONResponse">
<Type>%String</Type>
<Parameter name="MAXLEN" value="5000"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>GenericCoffeeMakerResponseDefaultData</DefaultData>
<Data name="GenericCoffeeMakerResponseDefaultData">
<Subscript>"GenericCoffeeMakerResponse"</Subscript>
<Value name="1">
<Value>JSONResponse</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Demo.MyFunctions">
<Description>
Use or operation of this code is subject to acceptance of the license available in the code repository for this code.
</Description>
<TimeChanged>64344,50122.731807</TimeChanged>
<TimeCreated>64338,40618.662211</TimeCreated>

<Method name="ToJSON">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
		set JSONstring = ##class(Demo.coffeemaker).%OpenId(id).ToJSON()
		quit JSONstring
]]></Implementation>
</Method>

<Method name="GetAllCoffeemakers">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tArr = []
	Set rs = ##class(%SQL.Statement).%ExecDirect(,"SELECT * FROM Demo.coffeemaker")
	While rs.%Next() {
		Do tArr.%Push({
			"img":    			(rs.%Get("Img")),
			"coffeemakerID":    (rs.%Get("CoffeemakerID")),
			"name": 			(rs.%Get("Name")),
			"brand":        	(rs.%Get("Brand")),
			"color":   			(rs.%Get("Color")),
			"numcups":          (rs.%Get("NumCups")),
			"price":        	(rs.%Get("Price"))
		})
	}
	
	quit tArr.%ToJSON()
]]></Implementation>
</Method>

<Method name="DeleteMaker">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set status = ##class(Demo.coffeemaker).%DeleteId(id)
	set response = {}
	if status = $$$OK
	{
		do response.%Set("message","Coffeemaker with id "_id_" has been deleted.")
	}
	else 
	{
		do response.%Set("message","Deletion failed. Likely no coffeemaker with id "_id)
	}
	quit response.%ToJSON()
]]></Implementation>
</Method>

<Method name="NewMaker">
<ClassMethod>1</ClassMethod>
<FormalSpec>Payload:Demo.tempCoffeemaker</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set cm = ##class(Demo.coffeemaker).%New()
	Do ..CopyToCoffeemakerFromJSON(.cm,Payload)
	
	Set sc = cm.%Save()
	
	Set result={}
	do result.%Set("Status",$s($$$ISERR(sc):$system.Status.GetOneErrorText(sc),1:"OK"))
	if '$$$ISERR(sc) do result.%Set("Message","New maker saved with ID "_cm.%Id())
	quit result.%ToJSON()
]]></Implementation>
</Method>

<Method name="EditMaker">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String,Payload:Demo.tempCoffeemaker</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set cm = ##class(Demo.coffeemaker).%OpenId(id)
	If '$IsObject(cm) {
		Set error = {"errormessage": "Coffee maker does not exist"}
		Quit error.%ToJSON()
	}
	
	Do ..CopyToCoffeemakerFromJSON(.cm,Payload)
				
	Set sc = cm.%Save()

	Set result={}
	do result.%Set("Status",$s($$$ISERR(sc):$system.Status.GetOneErrorText(sc),1:"OK"))
	if '$$$ISERR(sc) do result.%Set("Message","Maker with ID "_cm.%Id()_" has been updated")
	quit result.%ToJSON()
]]></Implementation>
</Method>


<Method name="CopyToCoffeemakerFromJSON">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&cm:Demo.coffeemaker,obj:Demo.tempCoffeemaker]]></FormalSpec>
<Implementation><![CDATA[
	Set cm.Name= obj.Name
	set cm.Brand = obj.Brand
	Set cm.Img = obj.Img
	set cm.Color = obj.Color
	set cm.NumCups = obj.NumCups
	set cm.Price = obj.Price
]]></Implementation>
</Method>
</Class>




<Class name="Demo.coffeemaker">
<Super>%Persistent,%Populate,%XML.Adaptor</Super>
<Description>
Use or operation of this code is subject to acceptance of the license available in the code repository for this code.
</Description>
<TimeChanged>64341,34783.600551</TimeChanged>
<TimeCreated>64320,60422.477244</TimeCreated>

<Property name="CoffeemakerID">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode>Set {*} = {ID} </SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Brand">
<Type>%String</Type>
</Property>

<Property name="Color">
<Type>%String</Type>
</Property>

<Property name="NumCups">
<Type>%Integer</Type>
<Parameter name="VALUELIST" value=",1,2,3,4,8,12,16,32,64"/>
</Property>

<Property name="Price">
<Type>%Numeric</Type>
<Parameter name="SCALE" value="2"/>
</Property>

<Property name="Img">
<Type>%String</Type>
<InitialExpression>"test-redphone.png"</InitialExpression>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Method name="ToJSON">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set obj = {}
	set obj.CoffeemakerID = ..CoffeemakerID
	set obj.Name = ..Name
	set obj.Brand = ..Brand
	set obj.Color = ..Color
	set obj.NumCups = ..NumCups
	set obj.Price = ..Price
	set obj.Img = ..Img
	set string = obj.%ToJSON()
	quit string
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Demo.coffeemakerD</DataLocation>
<DefaultData>coffeemakerDefaultData</DefaultData>
<IdLocation>^Demo.coffeemakerD</IdLocation>
<IndexLocation>^Demo.coffeemakerI</IndexLocation>
<StreamLocation>^Demo.coffeemakerS</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="coffeemakerDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CoffeemakerID</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
<Value name="4">
<Value>Brand</Value>
</Value>
<Value name="5">
<Value>Color</Value>
</Value>
<Value name="6">
<Value>NumCups</Value>
</Value>
<Value name="7">
<Value>Price</Value>
</Value>
<Value name="8">
<Value>Img</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>1.1</AverageFieldSize>
</Property>
<Property name="Brand">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>4.8</AverageFieldSize>
</Property>
<Property name="CoffeeMakerID">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>1.1</AverageFieldSize>
</Property>
<Property name="Color">
<Selectivity>20.0000%</Selectivity>
<AverageFieldSize>4.7</AverageFieldSize>
</Property>
<Property name="ID">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>8.8</AverageFieldSize>
</Property>
<Property name="Img">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
</Property>
<Property name="Name">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>15.7</AverageFieldSize>
</Property>
<Property name="NumCups">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>1.3</AverageFieldSize>
</Property>
<Property name="Price">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>6.8</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>




<Class name="Demo.tempCoffeemaker">
<Super>%Persistent,Demo.coffeemaker</Super>
<Description>
Use or operation of this code is subject to acceptance of the license available in the code repository for this code.
</Description>
<TimeChanged>64344,46196.002418</TimeChanged>
<TimeCreated>64344,45668.251495</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Demo.tempCoffeemakerD</DataLocation>
<DefaultData>tempCoffeemakerDefaultData</DefaultData>
<IdLocation>^Demo.tempCoffeemakerD</IdLocation>
<IndexLocation>^Demo.tempCoffeemakerI</IndexLocation>
<StreamLocation>^Demo.tempCoffeemakerS</StreamLocation>
<Data name="tempCoffeemakerDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Brand</Value>
</Value>
<Value name="4">
<Value>Color</Value>
</Value>
<Value name="5">
<Value>NumCups</Value>
</Value>
<Value name="6">
<Value>Price</Value>
</Value>
<Value name="7">
<Value>Img</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
